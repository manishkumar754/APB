// design.sv
// Clean APB Slave IP (no wait states)

`define AWIDTH 32
`define DWIDTH 32

module slave_ip(
    input  bit   [`AWIDTH-1:0]  apb_addr,
    input  bit                  apb_sel,
    input  bit                  apb_enable,
    input  bit                  apb_write,
    output logic [`DWIDTH-1:0] apb_rdata,
    input  logic [`DWIDTH-1:0] apb_wdata,
    input  bit                  clk,
    input  wire                 rst
);

  // Internal memory (simple RAM)
  logic [`DWIDTH-1:0] ram [0:255];

  // Read logic
  always_comb begin
    if (apb_sel && apb_enable && !apb_write)
      apb_rdata = ram[apb_addr];
    else
      apb_rdata = '0;
  end

  // Write logic
  always_ff @(posedge clk or negedge rst) begin
    if (!rst) begin
      integer i;
      for (i = 0; i < 256; i++) begin
        ram[i] <= 0;
      end
    end else if (apb_sel && apb_enable && apb_write) begin
      ram[apb_addr] <= apb_wdata;
    end
  end

endmodule




















`define AWIDTH 32
`define DWIDTH 32

module top;

reg   [`AWIDTH-1:0]  apb_addr;
reg                  apb_enable;
reg                  apb_write;
wire   [`DWIDTH-1:0]  apb_rdata;
reg [`DWIDTH-1:0]  apb_wdata;
reg                 clk;
reg               rst;
reg apb_sel;

slave_ip DUT(apb_addr,apb_sel,apb_enable,apb_write,apb_rdata,apb_wdata,clk,rst);

always #5 clk = ~clk;

initial begin 
	clk <= 0;
	rst <= 1;
	#1;
	rst <= 0; apb_addr <= 0; apb_enable <= 0; apb_sel <= 0; apb_write <=0; apb_wdata <=0;
	#2;
	rst <= 1;
	#3;
	
	repeat(2)@(posedge clk);
	
	// Write
	
	apb_addr <= 10;
	apb_wdata <= 100;
	apb_write <= 1;
	apb_sel <= 1;
	apb_enable <= 0;
	@(posedge clk);
	apb_enable <= 1;
	@(posedge clk);
	apb_enable <= 0;
	
	repeat(3)@(posedge clk);
	apb_addr <= 10;
	apb_write <= 0;
	@(posedge clk);
	apb_enable <= 1;
	@(posedge clk);
	apb_enable <= 0;
	
	repeat(2)@(posedge clk);
	apb_addr <= 50;
	apb_write <= 0;
	@(posedge clk);
	apb_enable <= 1;
	@(posedge clk);
	apb_enable <= 0;
	
	write_read(20,200);
	write_read(5,34);
	write_read(125,50);
	
	
	repeat(5)@(posedge clk);
	$finish;
end 

task write_read(input reg   [`AWIDTH-1:0] addr_t,input [`DWIDTH-1:0] wdata_t);
apb_sel <= 1;
	// Write
    apb_addr <= addr_t;
	apb_wdata <= wdata_t;
	apb_write <= 1;
	apb_enable <= 0;
	@(posedge clk);
	apb_enable <= 1;
	@(posedge clk);
	apb_enable <= 0;
	// Read
	apb_addr <= addr_t;
	apb_write <= 0;
	@(posedge clk);
	apb_enable <= 1;
	@(posedge clk);
	apb_enable <= 0;
apb_sel <= 0;
endtask
initial begin
  $dumpvars;
  $dumpfile("dump.vcd");
  
end
endmodule

